[
  {
    "problem_number": "1",
    "question": "Indicate whether each of the following expressions in the specified FL language-variant evaluates to the number two (2).",
    "subquestions": [
      {
        "problem_number": "1a",
        "question": "Dynamically-scoped Call-By-Name FL\n\n```scheme\n(let ((foo (let ((a 5))\n             (lambda (x) (- a x)))))\n  (let ((b 3))\n    (foo b)))\n```",
        "answer": "No, the result is _error_: _a is undefined_."
      },
      {
        "problem_number": "1b",
        "question": "Statically-scoped Call-By-Reference FLAVARI\n\n```scheme\n(let ((x 0)\n      (foo (lambda (y z)\n             (begin (set! y 2)\n                    (/ 4 z)))))\n  (foo x x))\n```",
        "answer": "Yes, aliasing allows us to use multiple names for the same location in the store."
      },
      {
        "problem_number": "1c",
        "question": "Statically-scoped Call-By-Value FL\n\n```scheme\n(let ((foo (proc x (rec x x)))\n      (bar (proc y 2)))\n  (bar foo))\n```",
        "answer": "Yes, even in Call-By-Value we don't evaluate the body of a procedure until it's called."
      },
      {
        "problem_number": "1d",
        "question": "Statically-scoped Call-By-Value FLK! (with label and jump)\n\n```scheme\n(label bar\n  (* 2 (label foo\n         (jump foo (jump bar 1)))))\n```",
        "answer": "No, (jump bar 1) passes 1 directly to the label bar, so the result is 1."
      },
      {
        "problem_number": "1e",
        "question": "Dynamically-scoped Call-By-Value FL\n\n```scheme\n(let ((x 1))\n  (let ((f (lambda () x))\n        (g (lambda (h) (h)))))\n  (let ((x 2))\n    (g f))))\n```",
        "answer": "Yes, procedure f gets the value 2 for the free variable x from the dynamic environment."
      }
    ]
  },
  {
    "problem_number": "2",
    "question": "YOUR ANSWERS TO THIS QUESTION SHOULD BE BASED ON THE FLK SOS AS PRESENTED IN APPENDIX A.\n\nLouis Reasoner has an idea for a new FLK command, (terminate \\(E_{1}\\) \\(E_{2}\\)). If either \\(E_{1}\\) or \\(E_{2}\\) terminates with a value or an error, (terminate \\(E_{1}\\) \\(E_{2}\\)) will also terminate with a value or an error. In evaluating terminate, we run one expression for one step, then run the other expression for one step, and so on. Louis initially worked out a few examples of how his new construct would work:\n\n(terminate 1 2) \\(\\Rightarrow\\) 1 or 2 (implementation dependent)\n\n(terminate 2 (rec x x)) \\(\\Rightarrow\\) 2\n\n(terminate 1 (call 3 0)) \\(\\Rightarrow\\) 1 or _error_: _can't apply non-procedure_ (implementation dependent)\n\n(terminate (rec x x) (\\(\\prime\\) 3 0)) \\(\\Rightarrow\\)_error_: _divide by zero_\n\n(terminate (rec x x) (rec x x)) \\(\\Rightarrow\\)\\(\\bot\\)\n\nLouis is really excited about the terminate construct. His old implementation of FLK required him to reboot any time his program ran into an infinite loop. Although he hasn't solved the halting problem, now he can guarantee not to have to reboot (excepting, of course, when his new-fangled operating system crashes) by testing his programs with terminate and his new (timer \\(N\\)) construct.\n\nLouis defined the following transition rule(s) for timer:\n\n(timer \\(N_{1}\\)) \\(\\Rightarrow\\) (timer \\(N_{2}\\))\n\nwhere \\(N_{1}>1\\)[_timer-countdown_]\n\nand \\(N_{2}=N_{1}-1\\)\n\n(timer 1) \\(\\Rightarrow\\)\\(\\#u\\)[_timer_]\n\nLouis can now use the terminate construct to run his program _might-go-infinite_ for exactly 1000 steps (where we consider each transition to be one step). The following expression will return the result of _mighty-infinite_ if it completes in under 1000 steps, otherwise it returns #u.\n\n(terminate (timer 1000) _might-go-infinite_ )\n\nUnfortunately, Louis set off for Hawaii before he was able to extend the FL Operational Semantics to include terminate. In his absence, you are asked to finish it up.",
    "subquestions": [
      {
        "problem_number": "2a",
        "question": "Give the transition rules for terminate.",
        "answer": "\\\\[E_{1}\\\\Rightarrow E^{\\prime}_{1}\\\\] [_terminate-progress_]\n\n(terminate \\(E_{1}\\) \\(E_{2}\\)) \\(\\Rightarrow\\) (terminate \\(E_{2}\\) \\(E^{\\prime}_{1}\\))\n\n(terminate \\(V\\) \\(E\\)) \\(\\Rightarrow\\) \\(V\\)[_terminate-with-value_]"
      },
      {
        "problem_number": "2b",
        "question": "Are your rules confluent?",
        "answer": "Yes, the rules are confluent."
      },
      {
        "problem_number": "2c",
        "question": "Show how the following expression would be evaluated using the rules above:\n\n(terminate (call (proc x (primop + x 2)) 5) (if (\\(>\\) 3 4) (rec x x) (proc y 1))",
        "answer": "\\(\\Rightarrow\\) (terminate (if (\\(>3 4\\))    (rec x x)    (proc y 1))    (primop + 5 2))\n\n\\(\\Rightarrow\\) (terminate (primop + 5 2)    (if false    (rec x x)    (proc y 1)))\n\n\\(\\Rightarrow\\) (terminate (if false    (rec x x)    (proc y 1))    7)\n\n\\(\\Rightarrow\\) (terminate 7    (proc y 1))\n\n\\(\\Rightarrow\\) 7"
      }
    ]
  },
  {
    "problem_number": "3",
    "question": "YOUR ANSWERS TO THIS PROBLEM SHOULD BE BASED ON THE STANDARD DENOTATIONAL SEMANTICS FOR FLK! AS PRESENTED IN APPENDIX B.\n\nAlyssa P. Hacker has decided to add a new feature to FLK!: the ability to undo store modifications. She introduces a single new form into FLK! called undo!:\n\n(undo!)\n; undo the last mutation to the store\n\nHere is an example of how undo! can be used to undo a cell-set! using FL! sugar:\n\n```scheme\n(let ((c (cell 0)))\n  (begin\n    (primop cell-set! c 1)\n    (undo!)\n    (primop cell-ref c)))\n```\n\n\\(\\Rightarrow\\) 0\n\nBefore Alyssa is called away to testify at a large antitrust trial, she managed to update the Standard Semantics found in Appendix B as follows:\n\nCmdcont = StoreStack \\(\\rightarrow\\) Answer\n\n\\(z \\in\\) StoreStack = Store\n\n\\(T L [E ] = E [E ]\\) empty-env top-level-cont empty-store.[]Store\n\nYou can assume all of the semantic algebra helper functions that deal in CmdCont have been properly updated. Store operations same-location?, next-location, empty-store, fetch, assign, fresh-loc, and first-fresh remain unchanged.",
    "subquestions": [
      {
        "problem_number": "3a",
        "question": "As she was running out the door, Alyssa mumbled something about the dangers of undoing cell creations using undo!. Give an example of a program that would generate a run-time error if Alyssa permits the cell form to be undone.",
        "answer": "```scheme\n(let ((c (cell 0)))\n  (begin\n    (undo!)\n    (primop cell-ref c)))\n```"
      },
      {
        "problem_number": "3b",
        "question": "Dissatisfied with the possibility of run-time errors, Alyssa faxes you a revised meaning function for cell and assures you that we can prevent undos to cell creations.\n\n\\\\[E [(primop cell E) ] = \\lambda ek . E [E ] e (\\lambda vz . matching z\n\\quad \\triangleright s.z1 \\parallel (k (Location \\mapsto Value (fresh-loc s))\n\\quad (assign-to-all (fresh-loc s) v z))\n\\quad endmatching )\n\nassign-to-all : Location \\rightarrow Storable \\rightarrow StoreStack \\rightarrow StoreStack\n= fixLocation \\rightarrow Storable \\rightarrow StoreStack \\rightarrow StoreStack \\lambda f . (\\lambda l\\sigma z . matching z\n\\quad \\triangleright []Store \\parallel []Store\n\\quad \\triangleright s.z1 \\parallel (assign l \\sigma s). (f l \\sigma z1)\n\\quad endmatching )\n\nProvide a revised meaning function for E [(primop cell-set! E1 E2) ].",
        "answer": "\\\\[E [(primop cell-set! E1 E2) ] = \\lambda ek . E [E1 ] e (test-location (\\lambda l . E [E2 ] e (\\lambda vz . matching z\n\\quad \\triangleright s.z1 \\parallel (k (Unit \\mapsto Value unit) (assign l v s).z)\n\\quad endmatching )))\\\\]"
      },
      {
        "problem_number": "3c",
        "question": "Also provide a revised meaning function for Alyssa’s new undo! form, E [undo!) ]. Her notes specified that even in the absence of cell-set!’s, undo! should not produce any errors.",
        "answer": "\\\\[E [(primop undo!) ] = \\lambda ekz . matching z\n\\quad \\triangleright s.[]Store \\parallel (k (Unit \\mapsto Value unit) s.[]Store)\n\\quad \\triangleright s.z1 \\parallel (k (Unit \\mapsto Value unit) z1)\n\\quad endmatching\\\\]"
      }
    ]
  },
  {
    "problem_number": "4",
    "question": "YOUR ANSWERS TO THIS PROBLEM SHOULD BE BASED ON THE STANDARD DENOTATIONAL SEMANTICS FOR FLK! AS PRESENTED IN APPENDIX B.\n\nBen Bitdiddle is now ensconced in a major research university where he's been fooling around with loops in FLK!. Ben has decided to add the following features to FLK!:\n\n\\[E::=\\ldots\\text{all FLK! forms}\\ldots\\mid(\\text{loop }E)\\mid(\\text{exit }E)\\mid(\\text{jump})\\]\n\nHere's an example of how Ben's new loop construct would work:\n\n```scheme\n(let ((c (cell 0)))\n  (loop\n    (begin\n      (primop cell-set! c (+ (primop cell-ref c) 1))\n      (if (> (cell-ref c) 10)\n          (exit (primop cell-ref c))\n          (jump)))))\n```\n\n\\(\\Rightarrow\\) 11\n\nAs one of Ben's grad students, your job is to write the denotational semantics for FLK! with his new looping functionality. Ben has already revised the domain equations for you:\n\n\\[j\\in\\text{Jumpcont}=\\text{Cmdcont}\\]\n\\[x\\in\\quad\\text{Exitcont}=\\text{Expcont}\\]\n\nHe's also changed the signature of the \\(\\mathcal{E}\\) meaning function so that every expression is evaluated with both a jump and an exit continuation:\n\n\\[\\mathcal{E}:\\text{Exp}\\rightarrow\\text{Environment}\\rightarrow\\text{Jumpcont}\\rightarrow\\text{Exitcont}\\rightarrow\\text{Expcont}\\rightarrow\\text{Cmdcont}\\]\n\nBen did give you the meaning function clause for \\(\\mathcal{E}[\\text{(jump)}]\\) for reference.\n\n\\[\\mathcal{E}[\\text{(jump)}]=\\lambda ejzk\\cdot j\\]",
    "subquestions": [
      {
        "problem_number": "4a",
        "question": "Extend the meaning function in the FLK! Standard Semantics as given in Appendix B to include \\(\\mathcal{E}[\\text{(loop }E)]\\), given the new domains.",
        "answer": "\\[\\mathcal{E}[\\text{(loop }E)] = \\lambda ejxk . (\\text{fix}_{\\text{Cmdcont}} (\\lambda j1 . (\\mathcal{E}[E] e j1 k k)))\\]"
      },
      {
        "problem_number": "4b",
        "question": "Define the meaning function clause for \\(\\mathcal{E}[\\text{(exit }E)]\\).",
        "answer": "\\[\\mathcal{E}[\\text{(exit }E)] = \\lambda ejxk . \\mathcal{E}[E] e j x x\\]"
      },
      {
        "problem_number": "4c",
        "question": "Show that \\((\\text{loop }\\text{(jump)})\\) is equivalent to bottom.",
        "answer": "\\[\\mathcal{E}[\\text{(loop }\\text{(jump)})] = \\lambda ejxk . (\\text{fix} (\\lambda j1 . (\\mathcal{E}[\\text{(jump)}] e j1 k k)))\\] \n\n\\(\\Rightarrow\\) \n\n\\[\\mathcal{E}[\\text{(loop }\\text{(jump)})] = \\lambda ejxk . (\\text{fix} (\\lambda j1 . ((\\lambda ejxk . j) e j1 k k)))\\] \n\n\\(\\Rightarrow\\) \n\n\\[\\mathcal{E}[\\text{(loop }\\text{(jump)})] = \\lambda ejxk . (\\text{fix} (\\lambda j1 . j1))\\] \n\n\\(\\Rightarrow\\) \n\n\\[\\mathcal{E}[\\text{(loop }\\text{(jump)})] = \\bot\\]"
      }
    ]
  }
]