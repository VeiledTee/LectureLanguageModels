[
  {
    "problem_number": "1",
    "question": "**Problem 1: Short Answer [20 points]",
    "subquestions": [
      {
        "problem_number": "1a",
        "question": "Given the following domains:\n\n\\[A = \\{1\\}_{1}\\]\n\\[B = \\{a, b\\}_{1}\\]\n\n(i) [2 points] How many set theoretic functions are there in \\(A \\rightarrow B\\)?\n\n(ii) [2 points] How many continuous functions are there in \\(A \\rightarrow B\\)?",
        "answer": "(i) 9\n(ii) 5"
      },
      {
        "problem_number": "1b",
        "question": "In Scheme/R (Scheme with type reconstruction) give the most general type schemes of the following expressions, or state why the expression does not have a type:\n\n(i) [1 points]\n\n\\[\\text{(lambda (f) (lambda (g) (lambda (x) (g (f x))))}\\]",
        "answer": "\\[\\text{(generic (f}_1, f_2, f_3) (\\rightarrow ((-> (f_1) f_2)) (\\rightarrow ((-> (f_2) f_3)) (\\rightarrow (f_1) f_3))))\\]"
      },
      {
        "problem_number": "1b",
        "question": "In Scheme/R (Scheme with type reconstruction) give the most general type schemes of the following expressions, or state why the expression does not have a type:\n\n(ii) [1 points]\n\n\\[\\text{(lambda (x) (x x))}\\]",
        "answer": "Self application, no type"
      },
      {
        "problem_number": "1b",
        "question": "In Scheme/R (Scheme with type reconstruction) give the most general type schemes of the following expressions, or state why the expression does not have a type:\n\n(iii) [1 points]\n\n\\[\\text{(letrec ((f (lambda (x) (if (id x) (id 0) (id 1))))} \\\n\\text{(id (lambda (y) y)))} \\\n\\text{(f #t)})\\]",
        "answer": "Attempted polymorphic use of id in letrec bindings, no type"
      },
      {
        "problem_number": "1b",
        "question": "In Scheme/R (Scheme with type reconstruction) give the most general type schemes of the following expressions, or state why the expression does not have a type:\n\n(iv) [1 points]\n\n\\[\\text{(lambda (id) (if (id #t) (id 0) (id 1)))}\\]",
        "answer": "First class polymorphism, no type"
      },
      {
        "problem_number": "1c",
        "question": "Give the equivalent Scheme/XSP expression, and the type thereof, for each of the expressions in the previous part (part b).\n\n(i) [2 points]",
        "answer": "expression: \n\n\\[\\text{(plambda (f1 f2 f3) (lambda ((f (~> (f1) f2))) (lambda ((g (~> (f2) f3))) (lambda ((x f1)) (g (f x))))))}\\]\n\ntype: \n\n\\[\\text{(poly (f1 f2 f3) (~> ((-> (f1) f2)) (~> ((-> (f2) f3)) (~> (f1) f3))))}\\]"
      },
      {
        "problem_number": "1c",
        "question": "Give the equivalent Scheme/XSP expression, and the type thereof, for each of the expressions in the previous part (part b).\n\n(ii) [2 points]",
        "answer": "expression: \n\n\\[\\text{(plambda (f1) (lambda ((x (recof f2 (~> (f2) f1)))) (x x))))}\\]\n\ntype: \n\n\\[\\text{(poly (f1) (~> (recof f2 (~> (f2) f1)) f1))}\\]"
      },
      {
        "problem_number": "1c",
        "question": "Give the equivalent Scheme/XSP expression, and the type thereof, for each of the expressions in the previous part (part b).\n\n(iii) [2 points]",
        "answer": "expression: \n\n\\[\\text{(letrec ((f (~> (bool) int) (f (lambda (x) (if ((proj id bool) x) ((proj id int) 0) ((proj id int) 1)))))) (id (poly (f) (~> (f) f)) (plambda (f) (lambda ((y f)) y)))) (f #t))}\\]\n\ntype: \n\n\\[\\text{int}\\]"
      },
      {
        "problem_number": "1c",
        "question": "Give the equivalent Scheme/XSP expression, and the type thereof, for each of the expressions in the previous part (part b).\n\n(iv) [2 points]",
        "answer": "expression: \n\n\\[\\text{(lambda ((id (poly (t) (\\(\\rightarrow\\) (t) t)))) (if ((proj id bool) #t) ((proj id int) 0) ((proj id int) i)))}\\]\n\ntype: \n\n\\[\\text{(\\(\\rightarrow\\) (poly (t) (\\(\\rightarrow\\) (t) t)) int)}\\]"
      },
      {
        "problem_number": "1d",
        "question": "Give the desugaring of the following Scheme/R expression\n\n\\[\\text{(match z ((cons 1 x) x) (x (cons 1 x)))}\\]",
        "answer": "\\[\\text{(let ((Itop z)) (let ((Ifail (lambda () (let ((x Itop)) (cons 1 x))))) (cons~ Itop (lambda (I1 I2) (if (= I1 1) (let ((x I2)) x) (Ifail))) Ifail)))}\\]"
      },
      {
        "problem_number": "1e",
        "question": "Use define-datatype to define the (queued T) datatype that represents a queue with a list. For example, a (queued int) would be represented by an integer list.",
        "answer": "\\[\\text{(define-datatype (queued T) (list->queue (listof T))))}\\]"
      }
    ]
  },
  {
    "problem_number": "2",
    "question": "**Problem 2: State: FLK# [20 points]**\n\nSam Antics is working on a new language with hot new features that will appeal to government customers. He was going to base his language on Caffeine from Moon Microsystems, but negotiations broke down. He has therefore decided to extend FLK! and has hired you, a top FLK! consultant, to assist with modifying the language to support these new features. The new language is called FLK#, part of Sam Antics' new .GOV platform. The big feature of FLK# is user tracking and quotas in the store. An important customer observed that government users tended to use the store carelessly, resulting in expensive memory upgrades. To improve the situation, the FLK# store will maintain a per-user quota. (A quota restricts the number of cells a particular user can allocate.) The Standard Semantics of FLK! are changed as follows:\n\n\\(w\\in\\text{UserID}=\\text{Int}\\)\n\\(q\\in\\text{Quota}=\\text{UserID}\\rightarrow\\text{Int}\\)\n\\(\\gamma\\in\\text{Cmdcont}=\\text{UserID}\\rightarrow\\text{Quota}\\rightarrow\\text{Store} \\rightarrow\\text{Expressible}\\)\n\nerror-cont : Error \\(\\rightarrow\\) Cmdcont\n\n\\(=\\lambda y\\). \\(\\lambda w\\). \\(\\lambda q\\). \\(\\lambda s\\). (Error\\(\\mapsto\\)Expressible \\(y\\)) UserID is just an integer. User ID \\(0\\) is reserved for the case when no one is logged in. Quota is a function that when given a UserID returns the number of cells remaining in the user's quota. The quota starts at 100 cells, and a user's quota is tracked throughout the lifetime of the program (i.e., the quota is not reset upon logout). Cmdcont has been changed to take the currently logged in user ID, the current quota, and the current store to yield an answer. Plus, FLK# adds the following commands:\n\n\\(E\\quad::=\\)\\(\\ldots\\)[Classic FLK! expressions] \\(\\begin{array}[]{l}\\text{(login! }w)\\ \\text{(logout!)}\\ \\text{(check-quota)}\\end{array}\\)[Log in user \\(w\\)] [Log out current user] [Check user quota] (login! \\(w\\)) - logs in the user associated with the identifier \\(w\\); returns \\(w\\) (returns an error if a user is already logged in or if the UserID is 0) (logout!) - logs the current user out; returns the last user's identifier (returns an error if there is no user logged in) (check-quota) - returns the amount of quota remaining The definition of \\(\\mathcal{E}[\\text{(check-quota)}]\\) is:\n\n\\(\\mathcal{E}[\\text{(check-quota)}]=\\)\n\n\\(\\lambda_{ekwq}\\). **if**\\(w=0\\)\n\n\\(\\text{\\bf then }error\\text{-}cont\\)\\(\\text{no-user-logged-in }\\;\\;w\\;\\;\\;q\\)\n\n\\(\\text{\\bf else }(\\text{k }(\\text{Int}\\mapsto\\text{Value }\\;(q\\;\\,w))\\;w\\;\\;q)\\)**fi**",
    "subquestions": [
      {
        "problem_number": "2a",
        "question": "Write the meaning function clause for \\(\\mathcal{E}[\\text{(login! }E)]\\).",
        "answer": "\\(\\mathcal{E}[\\text{(login! }E)]=\\)\n\n\\(\\lambda_{ek}\\). \\(\\mathcal{E}[E]\\;e\\;(test\\text{-}int\\;\\;\\;\\lambda iw\\). **if**\\((w=0)\\) and \\((i\neq 0)\\)\n\n\\(\\text{\\bf then }(\\text{k }(\\text{Int}\\mapsto\\text{Value }\\;i)\\;\\;i)\\)\n\n\\(\\text{\\bf else }error\\text{-}cont\\)\\(\\text{already-logged-in }\\;w\\)**fi)**"
      },
      {
        "problem_number": "2b",
        "question": "Write the meaning function clause for \\(\\mathcal{E}[\\text{(logout!)}]\\).",
        "answer": "\\(\\mathcal{E}[\\text{(logout!)}]=\\)\n\n\\(\\lambda_{ekw}\\). **if**\\((w=0)\\)**then**\\((error\\text{-}cont\\)\\(\\text{not-logged-in }\\;w)\\)**else**\\((\\text{k }(\\text{Int}\\mapsto\\text{Value }\\;w)\\;\\;0)\\)**fi**"
      },
      {
        "problem_number": "2c",
        "question": "Give the definition of \\(\\mathcal{E}[\\{\\texttt{cell }E\\}]\\). Remember you cannot create a cell unless you are logged in.",
        "answer": "\\(\\mathcal{E}[\\{\\texttt{cell }E\\}]=\\)\n\n\\(\\lambda_{ek}\\). \\(\\mathcal{E}[E]\\;e\\)\n\n(\\(\\lambda ww_{1}qs\\) . **if** (\\(w_{1}=0\\)) or (\\((q\\;w_{1})=0\\))\n\n**then**_error-cont_ error \\(w_{1}\\;q\\;s\\)\n\n**else** (\\(k\\) (Location\\(\\mapsto\\)Value _(fresh-loc__s)_))\n\n\\(w_{1}\\)\n\n(\\(\\lambda w_{2}\\) . **if**\\(w_{2}=w_{1}\\)\n\n**then** (\\(q\\;w_{1}\\)) -1\n\n**else** (\\(q\\;w_{1}\\)) **fi**\n\n(_assign__(fresh-loc__s)_\\(v\\;s\\))))\n\n**fi**"
      },
      {
        "problem_number": "2d",
        "question": "Naturally, Sam Antics wants to embed some \"trap doors\" into the .GOV platform to enable him to \"learn more about his customers.\" One of these trap doors is the undocumented (raise-quota! n) command, which adds n cells to the quota of the current user and returns 0. Give the definition of \\(\\mathcal{E}[\\{\\texttt{raise-quota! }E\\}]\\).",
        "answer": "\\(\\mathcal{E}[\\{\\texttt{raise-quota! }E\\}]=\\)\n\n\\(\\lambda_{ek}\\). \\(\\mathcal{E}[E]\\;e\\)_(test-int_\\(\\lambda iw_{1}q\\)_. **if**\\(w_{1}=0\\)\n\n**then**_error-cont_ error-no-user-logged-in \\(w\\;q\\)\n\n**else** (\\(k\\) (Int\\(\\mapsto\\)Value \\(0\\)) \\(w_{1}\\)\n\n\\(\\lambda w_{2}\\) . **if**\\(w_{2}=w_{1}\\)**then** (\\(q\\;w_{1}\\)) + \\(i\\)**else** (\\(q\\;w_{1}\\))) **fi**"
      }
    ]
  },
  {
    "problem_number": "3",
    "question": "**Problem 3: Explicit Types [20 points]**\n\nLouis Reasoner has had a hard time implementing letter in a call-by-name version of Scheme/XSP, and has decided to use the fixed point operator FIX instead. For example, here the the correct definition of factorial in Louis' approach:\n\n```scheme\n(let ((fact-gen (lambda ((fact (\\(\\rightarrow\\) (int) int)))  (lambda ((n int)) (if (= n 0) 1 (* n (fact (- n 1)))))))  ((proj fix (\\(\\rightarrow\\) (int) int)) fact-gen))\n```\n\nThus fix is a procedure that computes the fixed point of a generating function. Ben Bitdiddle has been called on the scene to help, and he has ensured that Louis' Scheme/XSP supports recursive types using RECOF (see Appendix B).",
    "subquestions": [
      {
        "problem_number": "3a",
        "question": "What is the type of fact-gen?",
        "answer": "\\(\\rightarrow\\) ((\\(\\rightarrow\\) (int) int)) (\\(\\rightarrow\\) (int) int))"
      },
      {
        "problem_number": "3b",
        "question": "What is the type of fix?",
        "answer": "(poly (t) (\\(\\rightarrow\\) ((\\(\\rightarrow\\) (t) t)) t))"
      },
      {
        "problem_number": "3c",
        "question": "What is the type of ((proj fix (\\(\\rightarrow\\) (int) int)) fact-gen)?",
        "answer": "(\\(\\rightarrow\\) (int) int)"
      },
      {
        "problem_number": "3d",
        "question": "What is T1?",
        "answer": "T1 = (\\(\\rightarrow\\) (t) t)"
      },
      {
        "problem_number": "3e",
        "question": "What is T2?",
        "answer": "T2 = (recof x (\\(\\rightarrow\\) (x) t))"
      },
      {
        "problem_number": "3f",
        "question": "Louis has decided that he would like (fix E) to be a standard expression in his language. What is the typing rule for (fix E)?",
        "answer": "\\[\\frac{A\\vdash E:(\\rightarrow(T)\\text{ T})}{A\\vdash\\text{(fix E):T}}\\]"
      }
    ]
  },
  {
    "problem_number": "4",
    "question": "**Problem 4: Type Reconstruction [20 points]**\n\nWith sales declining and customers flocking to competitors' products, the board of directors at Prophet.com has decided to oust CTO Louis Reasoner and has assigned you and Alyssa P. Hacker as the pro tempore co-CTOs. Alyssa believes the secret to regaining market share is to make Scheme/R more Internet-friendly. The next generation product, code-named Scheme/R 9\\(i\\) (the \\(i\\) stands for Internet), contains socket functionality to make it easier to write Internet servers.\n\nA socket is like a stream or a channel in that you can read data from and write data to sockets. Sockets are named by a port number and also have a specific data type associated with them that determines the type of data that can be transmitted or received over the socket. (For the purpose of this problem, you can ignore any problems involved with opening more than one socket on the same port.)\n\nWe introduce a new type (socketof T) and six new forms:\n\n* *(int-socket \\(E_{port}\\)) returns a new integer socket.\n* *(bool-socket \\(E_{port}\\)) returns a new boolean socket.\n* *(unit-socket \\(E_{port}\\)) returns a new unit socket.\n* *(symbol-socket \\(E_{port}\\)) returns a new symbol socket.\n* *(read-all! \\(E_{socket}\\)\\(E_{reader}\\)) takes a socket and calls procedure \\(E_{reader}\\) once for each item remaining in the socket to be read; returns #u.\n* *(write! \\(E_{socket}\\)\\(E_{datum}\\)) Writes \\(E_{datum}\\) into the socket and returns #u.\n\nAlyssa has written the following Scheme/R type rules to get you started:\n\n\\[A\\vdash E:\\text{int}\\] \\[[int\\text{-}socket]\\] \\[A\\vdash(\\text{int-socket }E):(\\text{socketof int})\\] \\[A\\vdash E:\\text{int}\\] \\[[bool\\text{-}socket]\\] \\[A\\vdash(\\text{bool-socket }E):(\\text{socketof bool})\\] \\[A\\vdash E:\\text{int}\\] \\[[unit\\text{-}socket]\\] \\[A\\vdash(\\text{unit-socket }E):(\\text{socketof unit})\\] \\[A\\vdash E:\\text{int}\\] \\[[symbol\\text{-}socket]\\] \\[A\\vdash(\\text{symbol-socket }E):(\\text{socketof symbol})\\] \\[A\\vdash\\frac{E_{socket}:(\\text{socketof T})}{A\\vdash E_{reader}: (\\Rightarrow\\text{(T) unit})}\\] \\[[read\\text{-}all!]\\] \\[A\\vdash(\\text{read-all! }E_{socket}\\ E_{reader}):\\text{unit}\\] \\[A\\vdash\\frac{E_{socket}:(\\text{socketof T})}{A\\vdash E_{datum}: \\text{T}}\\] \\[[write!]\\] \\[A\\vdash(\\text{write! }E_{socket}\\ E_{datum}):\\text{unit}\\]\n\nShe has also agreed to write the implementation. Because you are a high-paid 6.821 consultant, your part is to write the type reconstruction algorithm for these constructs.",
    "subquestions": [
      {
        "problem_number": "4a",
        "question": "Give the type reconstruction algorithm for (int-socket \\(E_{port}\\))",
        "answer": "\\[R[\\left(\\text{int-socket }E\\right)]\\,AS=\\begin{array}[]{l}\\textbf{let}\\, \\langle T,\\, S_{1}\\rangle=R[E]|AS\\ \\textbf{in}\\,(\\langle\\text{socketof int}\\rangle,\\,U(T,\\,\\text{int},\\,S_{1})\\rangle\\end {array}\\]"
      },
      {
        "problem_number": "4b",
        "question": "Give the type reconstruction algorithm for (write! Esocket Edatum).",
        "answer": "\\[R [(write! Esocket Edatum) ] A S = let \\langle T1, S1\\rangle = R [Esocket ] A S \n in let \\langle T2, S2\\rangle = R [Edatum ] A S1 \n in let S3 = U (T1, (socketof ?t), S2) \n in \\langle unit, U (T2, ?t, S3)\\rangle\\]"
      },
      {
        "problem_number": "4c",
        "question": "Give the type reconstruction algorithm for (read-all! Esocket Ereader).",
        "answer": "\\[R [(read-all! Esocket Ereader ) ] A S = let \\langle T1, S1\\rangle = R [Esocket ] A S \n in let \\langle T2, S2\\rangle = R [Ereader ] A S1 \n in let S3 = U (T1, (socketof ?t), S2) \n in \\langle unit, U (T2, (-> (?t) unit), S3)\\rangle\\]"
      },
      {
        "problem_number": "4d",
        "question": "As part of Louis’s severance agreement, he agreed to stay on for one month to write a proxy server for Prophet.com’s intranet (by proxy server we mean something that reads data on one socket and writes it to another). He wrote the following code:\n\n```scheme\n(letrec ((proxy (lambda (socket-in socket-out) \n(read-all! socket-in \n(lambda (x) (write! socket-out x))))) \n(do-proxy-http (lambda () (proxy (symbol-socket 80) \n(symbol-socket 8080)))) \n(do-proxy-ftp (lambda () (proxy (int-socket 20) \n(int-socket 8020))))) \n(begin \n(do-proxy-http) \n(do-proxy-ftp)))\n```\n\nUnfortunately, on his way out on his last day, he gives you the code and tells you it doesn’t type check. Give a semantically equivalent (i.e., preserves procedures and procedure calls) replacement for Louis’ code that does type check.",
        "answer": "It doesn’t type check because in the definition of do-proxy-http, proxy is resolved to have type (-> ((socketof symbol) (socketof symbol)) unit), and thus cannot be used polymorphically by (do-proxy-ftp) to have type (-> ((socketof int) (socketof int)) unit).\n\nThe following code does not exhibit this problem:\n\n```scheme\n(let ((proxy (lambda (socket-in socket-out) \n(read-all! socket-in \n(lambda (x) (write! socket-out x)))))) \n(let (do-proxy-http (lambda () (proxy (symbol-socket 80) \n(symbol-socket 8080)))) \n(do-proxy-ftp (lambda () (proxy (int-socket 20) \n(int-socket 8020))))) \n(begin \n(do-proxy-http) \n(do-proxy-ftp))))\n```"
      },
      {
        "problem_number": "4e",
        "question": "Being the astute 6.821 consultant that you are, you also discover that Louis has used a construct that doesn’t have a type reconstruction algorithm in the book: begin. Give the type reconstruction algorithm for (begin \\(E_{1}\\)\\(E_{2}\\)).",
        "answer": "\\[R[\\{\\texttt{begin}\\ E_{1}E_{2}...E_{n}\\}]\\)\\(A\\)\\(S=\\ \\textbf{let}\\ \\langle T_{1},\\ S_{1}\\rangle=R[E_{1}]\\)\\(A\\)\\(S\\)\n\n\\(\\textbf{in}\\ \\ldots\\)\n\n\\(\\textbf{let}\\ \\langle T_{n},\\ S_{n}\\rangle=R[E_{n}]\\)\\(A\\)\\(S_{n-1}\\)\n\n\\(\\textbf{in}\\ \\langle T_{n},\\ S_{n}\\rangle\\)"
      }
    ]
  },
  {
    "problem_number": "5",
    "question": "**Problem 5: Compiling [20 points]**",
    "subquestions": [
      {
        "problem_number": "5a",
        "question": "What source code generated the following output from the Tortoise compiler?\n\n```scheme\n(program (define *top* (%closure {lambda (.closure8. x) x}))) (call-closure *top* (%closure {lambda (.closure7. f .k1.) (call-closure .k1. (%closure {lambda (.closure6. x .k2.) (call-closure (%closure-ref .closure6. 1) x (%closure {lambda (.closure5. .t3.) (call-closure (%closure-ref .closure5. 1) .t3. (%closure-ref .closure5. 2))) (%closure-ref .closure6. 1) .k2.))) f))))))\n```",
        "answer": "```scheme\n(lambda (f) {lambda (x) (f (f x))))\n```"
      },
      {
        "problem_number": "5b",
        "question": "The meaning of (COND (\\(P_{1}\\)\\(E_{1}\\)) (\\(P_{2}\\)\\(E_{2}\\)) (else \\(E_{3}\\))) is \\(E_{1}\\) if \\(P_{1}\\) is true, \\(E_{2}\\) is \\(P_{1}\\) is false and \\(P_{2}\\) is true, and \\(E_{3}\\) otherwise. What is \\(\\mathcal{MCPS}[(\\texttt{COND }(P_{1}\\)\\(E_{1})\\) (\\(P_{2}\\)\\(E_{2}\\)) (else \\(E_{3}\\)))]?",
        "answer": "\\(\\mathcal{MCPS}[(\\texttt{COND }(P_{1}\\)\\(E_{1})\\) (\\(P_{2}\\)\\(E_{2}\\)) (else \\(E_{3}\\)))]\\) = \\(\\lambda m\\). (let ((\\(k\\) {lambda (v) \\([m\\) v]})) \\(\\lambda m\\).\\(\\mathcal{MCPS}[P_{1}]\\)\\([\\lambda v_{1}\\). (IF \\(v_{1}\\) \\([\\mathcal{MCPS}[E_{1}][exp\\to meta-cont\\;k]]\\) \\([\\mathcal{MCPS}[P_{2}]\\)\\([\\lambda v_{2}\\). (IF \\(v_{2}\\) \\([\\mathcal{MCPS}[E_{2}][exp\\to meta-cont\\;k]]\\) \\([\\mathcal{MCPS}[E_{3}][exp\\to meta-cont\\;k]]\\))])])"
      },
      {
        "problem_number": "5c",
        "question": "Louis Reasoner has decided to add garbage collection to a language that previously employed explicit storage allocation with MALLOC and FREE opectors. His new implementation ignores FREE and reclaims space using a brand new and correct garbage collector. The garbage collector has more than twice as much heap space as the old explicitly managed heap. As soon as this new version of the language is released, several programs that used to run fine - crash.\n\n(i) [3 points] What is the problem?\n\n(ii) [3 points] How can the programmers fix the problems with their programs?",
        "answer": "(i) The programs crash because they run out of storage. Pointers to unused storage are not being destroyed, and thus the GC can not reclaim storage that was previously freeded with FREE.\n\n(ii) Zero all pointers to storage that are no longer in use."
      }
    ]
  }
]