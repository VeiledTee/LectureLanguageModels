{
    "questions": [
        {
            "question": "Indicate whether the given running times of each of problems (3), (4), and (5) are polynomial or pseudopolynomial by circling the appropriate word below. One can answer this question without actually solving problems (3), (4), and (5).",
            "answer": "Problem 3: Number Scrabble\nPolynomial",
            "problem_number": "2",
            "context": "Problem 2. [3 points] Pseudo-Circling"
        },
        {
            "question": "Indicate whether the given running times of each of problems (3), (4), and (5) are polynomial or pseudopolynomial by circling the appropriate word below. One can answer this question without actually solving problems (3), (4), and (5).",
            "answer": "Problem 4: Limited-Unlimited\nPseudopolynomial",
            "problem_number": "2",
            "context": "Problem 2. [3 points] Pseudo-Circling"
        },
        {
            "question": "Indicate whether the given running times of each of problems (3), (4), and (5) are polynomial or pseudopolynomial by circling the appropriate word below. One can answer this question without actually solving problems (3), (4), and (5).",
            "answer": "Problem 5: Office Hour Optimization Polynomial",
            "problem_number": "2",
            "context": "Problem 2. [3 points] Pseudo-Circling"
        },
        {
            "question": "Given T and P, describe an O(n + m)-time algorithm to return a gameplay of maximum total value.",
            "answer": "To solve this problem, it would be useful to be able to check whether a particular array of at most 10 positive integers is a playable word. Construct an empty hash table D and insert each $p_i$ for $i \\in {0, . . ., m \u2013 1}$ into D, mapping to its value $v(p_i)$. Each hash table insertion takes expected constant time (as each $p_i$ has constant size), so constructing D takes expected O(m) time.\nNow we solve the problem via dynamic programming.\n1. Subproblems\n\u2022 x(i): the maximum total value of any gameplay on suffix T[i :] for $i \\in {0, . . ., n}$\n2. Relate\n\u2022 Left-most playable word either starts with $t_i$ or it does not\n\u2022 If playable word starts with $t_i$, word may have any length in {1, . . ., 10} (Guess!)\n\u2022 $x(i) = max\\{x(i+1)}\\cup\\{D[T[i : i + j]] + x(i + j)\\ \n 3. Topo\n\u2022 x(i) only depends on subproblems with strictly larger i, so acyclic\n4. Base\n\u2022 x(n) = 0 (empty gameplay admits no value)\n5. Original\n\u2022 Solve subproblems via recursive top down or iterative bottom up\n\u2022 x(0) is the maximum value of any gameplay on T\n\u2022 Store parent pointers to reconstruct an optimal gameplay\n6. Time\n\u2022 # subproblems: n + 1 = O(n)\n\u2022 Work per subproblem: expected O(1)\n\u2022 Together with hash table construction, yields expected O(n + m) time\n\u2022 (See scratch S2 for common mistakes)",
            "problem_number": "3",
            "context": "Number Scrabble is a one-player game played on an array T = [to,..., tn\u22121] of n positive integers. There is a list P = {(po, v(Po)),..., (Pm-1, V(Pm\u22121))} of m unique playable words, where playable word p\u2081 is a non-empty array of at most 10 positive integers and v(pi) is the positive integer value of p\u2081. The objective of the game is to find a gameplay S \u2014 a list of non-overlapping subarrays (i.e., substrings) of T, each a playable word where S has maximum total value, $\\sum_{s \\in S} v(s)$."
        },
        {
            "question": "Given a target sum m and two disjoint sets A and B, each containing exactly n distinct positive integers, describe an O(nm)-time algorithm to determine whether m is the sum of any limited-unlimited sequence S of A and B, i.e., $m = \\sum_{s \\in S} s$.",
            "answer": "1. Subproblems\n\u2022 Fix an arbitrary order on A = (ao, ..., an\u22121) and B = (bo, ..., bn-1)\n\u2022 xa(i, k): Boolean whether k is sum of any subset of suffix of A[i :] (without repeats)\n\u2022 XB(i, k): Boolean whether k is sum of any subset of suffix of B[i :] (allowing repeats)\n\u2022 for $i \\in {0, . . ., n}, k \\in {0, ...m}$\n2. Relate\n\u2022 Either use $a_i$ once or not (cannot use again)\n\u2022\nXA\n=OR\n\nxa(i + 1, k \u2212 a\u00a1\u00bf) if a\u017c \u2264 k\nxa(i + 1, k)\nalways\n\n\u2022 Either use $b_i$ once or not (but may use again)\n\u2022 $x_B(i,k)=OR$\n$x_B(i, k - b_j)$ if b; \u2264 k\nxB(i+1,k)\nalways\n\n3. Topo\n\u2022 Subproblems $x_A(i, k)$ and $x_B(i, k)$ each depend only on subproblems\nwith strictly smaller k\ni, so acyclic\n4. Base\n\u2022 $x_s(i, 0)$ = True for $s \\in {A, B}, i \\in {0, . . ., n}$ (can always make zero sum)\n\u2022 $x_s(n,k)$ = False for $s \\in {A, B}, k \\in {1, ..., m}$ (cannot make positive sum)\n5. Original\n\u2022 Solve subproblems via recursive top down or iterative bottom up\n\u2022 Original is whether a subset of A and a possibly-repeating subset of B sum to m\n\u2022 i.e., OR\\{AND\\{xa(0, k), xB(0, m \u2212 k)}\\ |\n6. Time\n\u2022 # subproblems: (n + 1)(m + 1) = O(nm)\n\u2022 Work per subproblem: O(1)\n\u2022 Original takes O(m) time\n\u2022 O(nm) running time in total\n\u2022 (See scratch S2 for common mistakes)",
            "problem_number": "4",
            "context": "Given two sets of integers A and B, a limited-unlimited sequence of A and B is any sequence S of integers such that each integer s \u2208 S appears in either A or B, and if s appears in A then s appears at most once in S."
        },
        {
            "question": "Describe an O(n\u00b3)-time algorithm to determine whether it is possible to assign the students equally to the three breakout rooms (i.e., n students to each room) while providing strictly positive help to every student, and if possible, return the maximum total benefit to students of any such assignment.",
            "answer": "Solution:\n1. Subproblems\n\u2022 Let the students be $i \\in {1, ..., 3n}$\n\u2022 x(i, j, k): the maximum benefit assigning students {1, . . ., i + j + k} to breakout rooms,\nwith i students to breakout a, j students to breakout b, and k students to breakout c,\nwhere each student is assigned to a breakout room with strictly positive benefit\n(or equals -\u221e if no such assignment is possible)\n\u2022 for i, j, $k \\in {0,..., n}$\n2. Relate\n\u2022 Must assign student i + j + k to some room (Guess!)\n\u2022 $x(i, j, k) = max{-\\infty}\\cup$\n$\n3. Topo\n\u2022 Subproblem x(i, j, k) depends only on strictly smaller i + j + k, so acyclic\n4. Base\n\u2022 x(0,0,0) = 0 (no benefit to assigning zero students)\n5. Original\n\u2022 Solve subproblems via recursive top down or iterative bottom up\n\u2022 x(n, n, n) is the maximum benefit to assign all students evenly to rooms\n6. Time\n\u2022 # subproblems: $(n + 1)^3 = O(n^3)$\n\u2022 Work per subproblem: O(1)\n\u2022 $O(n^3)$ running time in total\n\u2022 (See scratch S2 for common mistakes)",
            "problem_number": "5",
            "context": "Class 0.660 (Algorithms for Introductions) is holding online office hours to help students on three problems a, b, and c in three corresponding breakout rooms. The TAs want to develop a 'Sort Bot' to effectively assign each student to a single room at the start of office hours. Assume there are 3n students, where each student i has known nonnegative integer benefit ai, bi, and ci for being assigned to the room for problem a, b, and c, respectively."
        }
    ]
}