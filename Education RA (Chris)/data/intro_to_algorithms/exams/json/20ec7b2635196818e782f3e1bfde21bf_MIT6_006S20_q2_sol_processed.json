{
    "questions": [
        {
            "question": "Given a weighted, directed graph G = (V, E, w) with positive and negative edge weights, and given a particular vertex v \u2208 V, describe an O(k|E|)-time algorithm to return the minimum weight of any cycle containing vertex v that also has exactly k edges, or return that no such cycle exists. Recall that a cycle may repeat vertices/edges.",
            "answer": "Assume all vertices in G are reachable from v so that |V| = O(|E|); otherwise, run BFS or DFS to solve single source reachability from v, and replace G with the subgraph reachable from v in O(|E|) time. Construct a new graph G' = (V', E') with:\u2022 k + 1 vertices for each vertex v \u2208 V: specifically v\u1d62 for all i \u2208 {0, . . ., k}; and\u2022 k edges for each edge (u, v) \u2208 E: specifically edges (u\u1d62\u208b\u2081, v\u1d62) for all i \u2208 {1, ...,k}.Graph G' has (k + 1)|V| = O(k|E|) vertices and k|E| edges in k + 1 layers, and has the property that paths from v\u2080 to v\u2096 have a one-to-one correspondence with cycles through v in G of the same weight containing exactly k edges, since exactly one edge is traversed with each increase in layer. So solve SSSP from v\u2080 in G' to return the minimum weight path to v\u2096. Since edges in G' always increase in subscript, G' is a DAG, so we can solve SSSP using DAG relaxation in linear time with respect to the size of G'. So together with initial pruning, this algorithm takes O(k|E|) time in total.",
            "problem_number": "2",
            "context": "Problem 2. [16 points] Exact Edges"
        },
        {
            "question": "Given a 3-color labeling c : E \u2192 {red, green, blue} of a connected, weighted, undirected graph G = (V, E, w) containing only positive edge weights, and given two vertices s,t \u2208 V, describe an efficient algorithm to return a path from s to t having minimum color cost.",
            "answer": "Construct a new graph G' = (V', E') with:\u2022 3 vertices for each vertex v \u2208 V: specifically v\u1d62 for i \u2208 {red, green, blue} corresponding to arriving at vertex v via an edge with color i;\u2022 (vertex-edges) 3 undirected edges for each vertex v \u2208 V: specifically {vred, vblue}, {vgreen, vred}, and {vblue, vgreen} of weight wc; and\u2022 (edge-edges) 1 undirected edge for each undirected edge {u,v} \u2208 E of weight w and color c(u, v): specifically undirected edge {uc(u,v), vc(u,v)} with weight w.Graph G' has 3|V| vertices and 3|V| + |E| edges, and has the property that the minimum weight of any path in G' from any vertex s\u1d62 to any vertex t\u2c7c for i, j \u2208 {red, green, blue} is equal to the minimum color cost of any 3-color labeled path in G from s to t, as switching colors at a vertex requires traversing an edge of weight w. So solve SSSP three times, once from each vertex s\u1d62 and find the minimum weight of any path to any t\u2c7c, and then return a minimum path by constructing parent pointers as shown in lecture. Since this graph only has positive edge weights, we can solve SSSP using Dijkstra in O(|V| + |E| + |V|log |V|) = O(|E| + |V|log|V|) time.",
            "problem_number": "3",
            "context": "Problem 3. [18 points] Color Cost A 3-color labeling of a graph maps each edge to either red, green, or blue. The color cost of a 3-color labeled path is its path weight plus a positive integer w. every time the path changes color."
        },
        {
            "question": "Ranger Raargorn needs to deliver a message from her home town of Tina's Mirth to the town of Riverdell, but the towns of Midgard have been overrun by an army of k Orks. Raargorn has a map of the n towns and 3n roads in Midgard, where each road connects a pair of towns in both directions. Scouts have determined the number of Orks r\u1d62 \u2265 1 stationed in each town i (there is at least one Ork stationed in each town). Describe an O(k)-time algorithm to find a path from Tina's Mirth to Riverdell on which Raargorn will encounter the fewest total Orks in towns along the way.",
            "answer": "Construct a graph G = (V, E) with:\u2022 a chain of r\u1d62 vertices (v\u2081, ..., v\u1d63\u1d62) connected by r\u1d65 \u2013 1 edges for each town v, i.e., unweighted directed edge (v\u1d62, v\u1d62\u208a\u2081) for all i \u2208 {1, . . ., r\u1d65 \u2212 1}; and\u2022 two unweighted directed edges (v\u1d63\u1d65, u\u2081) and (v\u1d63\u1d65, u\u2081) for each road between towns u and v.Graph G has \u2211 r\u1d65 = k vertices and 2(3n) + \u2211(r\u1d65 \u2212 1) = 5n + k edges. Since there is at least one Ork in each town, k \u2265 n, so G has size O(k). Let s and t correspond to the towns of Tina's Mirth and Riverdell respectively. Graph G has the property that any path from s\u2081 to t\u1d63\u2081 corresponds to a path from Tina's Mirth to Riverdell crossing edges equal to the number of Orks encounters in towns along the way, since for any road connecting towns u and v, going from u\u2081 to v\u2081 requires traversing r\u1d65 edges in G. So solve unweighted SSSP from s\u2081 to t\u1d63\u2081 using BFS in O(k) time, and return the sequence of towns visited along the found shortest path by following parent pointers.",
            "problem_number": "4",
            "context": "Problem 4. [18 points] Orkscapade"
        },
        {
            "question": "Given a cycle-sparse graph, describe an O(|V|\u00b3)-time algorithm to return the number of negative-weight cycles in G.",
            "answer": "Construct a new graph G' by adding a supernode x to G with a zero-weight directed edge (x, v) for each v \u2208 V. Then run SSSP from x in G' using Bellman-Ford to label each vertex v \u2208 V with its shortest path distance \u03b4(x, v). For each v \u2208 V, \u03b4(x,v) = \u2212\u221e if and only if v is reachable from a negative-weight cycle in G (since adding x does not add or remove any cycles). Further, for any directed edge (u, v), if \u03b4(x, u) = \u03b4(x,v) = -\u221e, then both u and v are each reachable from the same simple negative-weight cycle (since v is reachable from u and each vertex is reachable from at most one simple negative-weight cycle).So, construct a new graph G\" on only the vertices v \u2208 V where \u03b4(x,v) = \u2212\u221e in G', with an undirected edge between u and v in G\" if they share a directed edge in G. Graph G\" has the property that the number of connected components in G\" equals the number of negative-weight cycles in G, so count and return the number of connected components in G\" using Full-BFS or Full-DFS. This algorithm takes O(|V|+|E|) time to construct G', O(|V||E|) time to run Bellman-Ford, O(|V|+|E|) time to construct G\", and then O(|V|+|E|) time to count connected components in G\", leading to an O(|V||E|) = O(|V|\u00b3) running time in total.",
            "problem_number": "5",
            "context": "Problem 5. [18 points] Count Cycles A cycle-sparse graph is any weighted directed simple graph G = (V, E, w) for which every vertex v \u2208 V is reachable from at most one simple\u00b9 negative-weight cycle in G."
        },
        {
            "question": "Assuming she departs s at half capacity, [b/2], describe an O(nlogn)-time algorithm to determine the maximum amount of energy Bellham can have in her battery upon reaching t.",
            "answer": "Construct graph G with a vertex for each of the n locations in Norway and a directed edge for each of the O(n) roads: specifically for each road from location u to v, add directed edge (u, v) weighted by J(u,v). Then [b/2] minus the weight of a minimum-weight path from s to t in G would correspond to the maximum energy Bellham could have upon reaching t; or at least it would be if she did not either exceed or exhaust her tank along the way.First we show that every minimum-weight path from s to t in G is simple. It suffices to show that every directed cycle in G has positive weight. Consider cycle (c\u2080, ..., c\u2096\u208b\u2081, c\u2096 = c\u2080). C has weight \u2211\u1d62\u208c\u2081\u1d4f J(c\u1d62\u208b\u2081, c\u1d62) > \u2211\u1d62\u208c\u2081\u1d4f mg(h(c\u1d62) - h(c\u1d62\u208b\u2081)) = 0, as desired.Any simple path in G traverses at most n - 1 edges, so the magnitude of its weight is at most (n - 1)k < b/2. Thus [b/2] minus the weight of any simple path in G will always be > 0 and < b (so Bellham cannot exhaust or exceed her tank by driving on a simple path from s to t).Lastly, we find the weight of a minimum-weight path from s to t by solving SSSP. Unfortunately using Bellman-Ford takes O(n\u00b2) time which is too slow. However, we can re-weight edges in G to be positive while preserving shortest paths by exploiting the provided vertex potentials, similar to Johnson's algorithm. Specifically, create new graph G', identical to G, except change the weight of each edge (u, v) to J(u, v) \u2013 mg(h(v) \u2013 h(u)) > 0. This transformation preserves shortest paths since the weight of each path from, e.g., a to b changes by the same amount, namely by mg(h(b) \u2013 h(a)). So run Dijkstra from s to find the minimum weight D of any path to t in G', and return [b/2] \u2013 (D \u2013 mg(h(b) \u2013 h(a))).Constructing G takes O(n) time, reweighting to G' also takes O(n) time, and then running Dijkstra from s in G' takes O(n log n) time, leading to O(n log n) time in total.",
            "problem_number": "6",
            "context": "Problem 6. [18 points] Bellham's Fjord Gralexandra Bellham wants to drive her electric car in Norway from location s in Oslo to a scenic Fjord at location t. She has a map of the n locations in Norway and the O(n) one-way roads directly connecting pairs of them."
        }
    ]
}