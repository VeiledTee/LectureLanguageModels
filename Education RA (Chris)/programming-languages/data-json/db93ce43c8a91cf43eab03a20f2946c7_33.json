[
    {
        "problem_number": "1",
        "question": "Give the meaning of the following FLAVARI expression under each parameter passing scheme. Hint: try to figure out the values of `(begin (f a) a)` and `(f (begin (set! b (+ b 2)) b))` separately, then find the sum.\n\n```scheme\n(let ((a 4) (b 0))\n  (let ((f (lambda (x)\n             (begin (set! x (+ x x))\n                    (/ x 2)))))\n    (+ (begin (f a) a)\n       (f (begin (set! b (+ b 2)) b)))))\n```",
        "subquestions": [
            {
                "problem_number": "1a",
                "question": "call-by-value",
                "answer": "6"
            },
            {
                "problem_number": "1b",
                "question": "call-by-name",
                "answer": "8"
            },
            {
                "problem_number": "1c",
                "question": "call-by-reference",
                "answer": "18"
            }
        ]
    },
    {
        "problem_number": "2",
        "question": "ANSWERS FOR THE FOLLOWING QUESTIONS SHOULD BE BASED ON THE SCHEME/XSP TYPING RULES GIVEN IN APPENDIX C.\n\nLouis Reasoner likes both dynamic scoping and explicit types, and thus decides to create a new language, Scheme/DX, that includes both! However, certain problems arise and you are called into rescue Louis' attempt.\n\nLouis revised a procedure definition to be:\n\nE := ... | (lambda (((I1 T1) ... (In Tn)) ((I1 T1') ... (Im Tm'))) E_B)\n\nwith the new type:\n\nT := ... | (-> ((T1 ... Tn) ((I1 T1') ... (Im Tm'))) T_B)\n\nThe first list of identifiers {Ii} and types {Ti} in LAMBDA specifies the formal parameters to LAMBDA, and the second list of identifiers {II} and types {TI} specifies all of the dynamically bound identifiers used by E and their types. Thus when a procedure is called, the types of BOTH the actual parameters and the dynamically bound variables must match.\n\nFor example:\n\n```scheme\n(let ((x 1))\n  (let ((p (lambda (((y int)) ((x bool))) (if x y 0))))\n    (let ((x #t))\n      (p 1))))\n```\n\n\\(\\Rightarrow\\) I\n\n```scheme\n(let ((x #t))\n  (let ((p (lambda (((y int)) ((x bool))) (if x y 0))))\n    (let ((x 1))\n      (p 1))))\n```\n\n\\(\\Rightarrow\\) NOT WELL TYPED\n\nFor an expression E, let \\(S\\) be the set of dynamically bound identifiers in E. We can extend our typing framework to be\n\nA ⊢ E : T @ S\n\nIn this framework, \"@\" means \"E uses dynamic variables\" just like \":\" means \"has type\".\n\nOur new combined typing and dynamic variable rule for identifiers is:\n\nA[I : T] ⊢ I : T @ {I}\n\nHere are two examples to give you an idea of what we mean:\n\nA[x : int] ⊢ (+ 1 x) : int @ {x}\n\nA[x : int] ⊢ (let ((x 1)) (+ 1 x)) : int @ {}\n\nIn this framework:",
        "subquestions": [
            {
                "problem_number": "2a",
                "question": "Give a combined typing and dynamic variable rule for LET.",
                "answer": "\\\\[\\\\frac{\\\\forall i (A \\\\vdash E_i : T_i @ S_i) \\\\quad A[I_1:T_1, ..., I_n:T_n] \\\\vdash E_B : T_B @ S_B}{A \\\\vdash (\\\\text{let} ((I_1 E_1) ... (I_n E_n)) E_B) : T_B @ S_1 \\\\cup ... \\\\cup S_n \\\\cup S_B - \\\\{I_1 ... I_n\\\\}}\\\\] [let]"
            },
            {
                "problem_number": "2b",
                "question": "Give a combined typing and dynamic variable rule for LAMBDA.",
                "answer": "\\\\[\\\\frac{A[I_1:T_1, ..., I_n:T_n, I_1':T_1', ..., I_m':T_m'] \\\\vdash E_B : T_B @ S \\\\quad S \\\\subseteq \\\\{I_1 ... I_n, I_1' ... I_m'\\\\}}{A \\\\vdash (\\\\text{lambda} (((I_1 T_1) ... (I_n T_n)) ((I_1' T_1') ... (I_m' T_m'))) E_B) : (\\\\rightarrow ((T_1 ... T_n) ((I_1' T_1') ... (I_m' T_m'))) T_B) @ \\\\{\\\\}}\\\\] [λ]"
            },
            {
                "problem_number": "2c",
                "question": "Give a combined typing and dynamic variable rule for application.",
                "answer": "\\\\[\\\\frac{A \\\\vdash E_P : (\\\\rightarrow ((T_1 ... T_n) ((I_1' T_1') ... (I_m' T_m'))) T_B) @ S_P \\\\quad \\\\forall i (A \\\\vdash E_i : T_i @ S_i) \\\\quad \\\\forall j (A[I_j'] = T_j')}{A \\\\vdash (E_P E_1 ... E_n) : T_B @ S_1 \\\\cup ... \\\\cup S_n \\\\cup S_P \\\\cup \\\\{I_1' ... I_m'\\\\}}\\\\] [call]"
            },
            {
                "problem_number": "2d",
                "question": "Briefly argue that your rules always guarantee that in well-typed programs references to dynamic variables are bound.",
                "answer": "The [call] rule guarantees that all dynamic variables needed in the procedure are bound. The expression \\(A[I_j'] = T_j'\\) will produce a type error if any \\(I_j'\\) is not bound. In addition, the [λ] rule guarantees that every dynamic variable used in the body of a procedure is properly declared."
            }
        ]
    },
    {
        "problem_number": "3",
        "question": "ANSWERS FOR THE FOLLOWING QUESTIONS SHOULD BE BASED ON THE SCHEME/R TYPING RULES AND TYPE RECONSTRUCTION ALGORITHM GIVEN IN THE APPENDIX.\n\nBen Bitdiddle is at it again, further enhancing Scheme/R. In this new and improved version he has added a new construct called `go` that executes all of its constituent expressions \\(E_1 ... E_n\\) in parallel:\n\nE := ... | (go (\\(I_1\\) ... \\(I_n\\)) \\(E_1\\) ... \\(E_m\\)) | (talk! \\(I\\) \\(E\\)) | (listen \\(I\\))\n\n`go` terminates when all of \\(E_1\\) ... \\(E_m\\) terminate, and it returns the value of \\(E_1\\). `go` includes the ability to use communication variables \\(I_1\\) ... \\(I_n\\) in a parallel computation. A communication variable can be assigned a value by `talk!`. An expression in `go` can wait for a communication variable to be given a value with `listen`. `listen` returns the value of the variable once it is set with `talk!`. For a program to be well typed, all \\(E_1\\) ... \\(E_n\\) in `go` must be well typed.\n\nCommunication variables will have the unique type `(commof T)` where T is the type of value they hold. This will ensure that only communication variables can be used with `talk!` and `listen`, and that communication variables cannot be used in any other expression.\n\nBen has given you the Scheme/R typing rules for `talk!` and `listen`:\n\n\\\\[\\\\frac{A \\\\vdash E : T \\\\quad A \\\\vdash I : (\\\\text{commof } T)}{A \\\\vdash (\\\\text{talk! } I E) : \\\\text{unit}}\\\\] [talk!]\n\n\\\\[\\\\frac{A \\\\vdash I : (\\\\text{commof } T)}{A \\\\vdash (\\\\text{listen } I) : T}\\\\] [listen]",
        "subquestions": [
          {
            "problem_number": "3a",
            "question": "Give the Scheme/R typing rule for `go`.",
            "answer": "\\\\[\\\\frac{\\\\forall i (A[I_1 : (\\\\text{commof } T_1'), ..., I_n : (\\\\text{commof } T_n')] \\\\vdash E_i : T_i)}{A \\\\vdash (\\\\text{go} (I_1 ... I_n) E_1 ... E_n) : T_1}\\\\] [go]"
          },
          {
            "problem_number": "3b",
            "question": "Give the Scheme/R reconstruction algorithm for `talk!`.",
            "answer": "\\\\[R[(\\\\text{talk! } I E)] A S = \\\\text{let } \\\\langle T, S_1 \\\\rangle = R[I] A S \\\\text{ in } \\\\text{let } \\\\langle T', S_2 \\\\rangle = R[E] A S_1 \\\\text{ in } \\\\text{let } S_3 = U(T, (\\\\text{commof } T'), S_2) \\\\text{ in } \\\\langle \\\\text{unit}, S_3 \\\\rangle\\\\]"
          },
          {
            "problem_number": "3c",
            "question": "Give the Scheme/R reconstruction algorithm for `listen`.",
            "answer": "\\\\[R[(\\\\text{listen } I)] A S = \\\\text{let } \\\\langle T, S_1 \\\\rangle = R[I] A S \\\\text{ in } \\\\text{let } S_2 = U((\\\\text{commof } ?t), T, S_1) \\\\text{ in } \\\\langle ?t, S_2 \\\\rangle\\\\]"
          },
          {
            "problem_number": "3d",
            "question": "Give the Scheme/R reconstruction algorithm for `go`.",
            "answer": "\\\\[R[(\\\\text{go} (I_1 ... I_n) E_1 ... E_m)] A S = \\\\text{let } A_1 = A[I_1 : (\\\\text{commof } ?t_1), ..., I_n : (\\\\text{commof } ?t_n)] \\\\text{ in } \\\\text{let } \\\\langle T_1, S_1 \\\\rangle = R[E_1] A_1 S \\\\text{ in } ... \\\\text{ let } \\\\langle T_m, S_m \\\\rangle = R[E_m] A_1 S_{m-1} \\\\text{ in } \\\\langle T_1, S_m \\\\rangle\\\\] \\\\text{where } ?t_1 ... ?t_n \\\\text{ are fresh.}"
          }
        ]
      },
      {
        "problem_number": "4",
        "question": "ANSWERS FOR THE FOLLOWING QUESTIONS SHOULD BE BASED ON THE META CPS CONVERSION ALGORITHM GIVEN IN APPENDIX G.\n\nThis problem contains two independent parts:\n\na. Ben Bitdiddle, the engineer in charge of the MCPS phase in the Tortoise compiler, looked over the book and the previous years' finals and couldn't find the meta-cps rule for `label` and `jump`. As Ben is very rushed - the new Tortoise compiler should hit the market in the middle of the holiday season - he's asking for your help. Here is a quick reminder of the semantics of `label` and `jump`:\n\n- `(label I E)` evaluates \\(E\\) inside \\(E\\), \\(I\\) is bound to the continuation of `(label I E)`. The labels are statically scoped (as the normal Scheme variables are).\n- `(jump E1 E2)` calls the continuation resulted from evaluating \\(E1\\), passing to it the result of evaluating \\(E2\\). \\(E1\\) should evaluate to a label (i.e., a continuation introduced by `label`). The behavior of `(jump E1 E2)` is unspecified if \\(E1\\) doesn't evaluate to a label (this is considered to be a programming error).\n\nE.g.: The expression `(label foo (+ 1 (jump foo (+ 2 (jump foo 3)))))` should evaluate to 3. Ben even wrote the SCPS rules for `label` and `jump`:\n\n\\\\[SCPS[(\\\\text{label } I E)] = (\\\\text{lambda (k)} \\\\quad (\\\\text{let ((I k))} \\\\quad (\\\\text{call } SCPS[E] \\\\text{ k)}))\\\\]\n\n\\\\[SCPS[(\\\\text{jump } E1 E2)] = (\\\\text{lambda (k1)} \\\\quad (\\\\text{call } SCPS[E1] \\\\quad (\\\\text{lambda (k2)} \\\\quad (\\\\text{call } SCPS[E2] \\\\text{ k2)})))\\\\]\n\nb. In class, we've mentioned a couple of times that type safety is impossible without automatic memory management (i.e., garbage collection). Please explain why this is true.",
        "subquestions": [
          {
            "problem_number": "4a",
            "question": "What is \\(\\\\mathcal{MCPS}[(\\\\text{label } I E)]\\)? Be careful to avoid code bloat.",
            "answer": "\\\\[\\\\mathcal{MCPS}[(\\\\text{label } I E)] = [\\\\lambda m . (\\\\text{LET} ((I [\\\\text{meta-cont} \\\\rightarrow \\\\text{exp} m])) [\\\\mathcal{MCPS}[E] [\\\\lambda v . (\\\\text{CALL} I v)]])]\\\\] \\\\text{I is lexically bound to } [\\\\text{meta-cont} \\\\rightarrow \\\\text{exp} m]. \\\\text{In the last line, we could have put } m \\\\text{ instead of } [\\\\lambda v . (\\\\text{CALL} I v)] \\\\text{ but this would lead to an exponential increase in the code size.}"
          },
          {
            "problem_number": "4b",
            "question": "What is \\(\\\\mathcal{MCPS}[(\\\\text{jump } E1 E2)]\\)?",
            "answer": "\\\\[\\\\mathcal{MCPS}[(\\\\text{jump } E1 E2)] = [\\\\lambda m . [\\\\mathcal{MCPS}[E1] [\\\\lambda v1 . [\\\\mathcal{MCPS}[E2] [\\\\lambda v2 . (\\\\text{CALL} v1 v2) ]]]]]\\\\] \\\\text{Very similar to the rule for CALL. However, this time we totally ignore } m \\\\text{ as required by the semantics of jump.}"
          },
          {
            "problem_number": "4c",
            "question": "In class, we've mentioned a couple of times that type safety is impossible without automatic memory management (i.e., garbage collection). Please explain why this is true.",
            "answer": "If we can explicitly free memory, then it would be possible to free a block of memory originally containing data of type T, then allocating it to data containing T', thus resulting in a type error when an expression gets a T' instead of a T."
          }
        ]
      }        
]