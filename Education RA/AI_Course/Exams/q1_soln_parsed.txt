# 6.034 Quiz 1, Spring 2005
## 1 Search Algorithms (16 points)
### 1.1 Games
The standard alpha-beta algorithm performs a depth-first exploration (to a pre-specified depth) of the game tree.
#### 1. Can alpha-beta be generalized to do a breadth-first exploration of the game tree and still get the optimal answer? Explain how or why not. If it can be generalized, indicate any advantages or disadvantages of using breadth-first search in this application
//// ANSWER: No. The alpha-beta algorithm is an optimization on min-max. Min-max inherently needs to examine the game-tree nodes below the current node (down to a predetermined depth) to assign a value. A breadth-first version of min-max does not work well because it loses the benefit of early pruning from left-most subtrees. Some argue that min-max must explore all the way to terminal nodes, but typically one only searches to a fixed depth using a static evaluator.
#### 2. Can alpha-beta be generalized to do a progressive-deepening exploration of the game tree and still get the optimal answer? Explain how or why not. If it can be generalized, indicate any advantages or disadvantages of using progressive-deepening search in this application
//// ANSWER: Yes. Progressive-deepening involves performing repeated depth-first searches to increasing depths. Both min-max and alpha-beta can use progressive-deepening, even though it wastes some work. However, the extra work is a small fraction of the total, and the method guarantees that a reasonable move is always available in timed situations.
### 1.2 Algorithms
#### 1. You are faced with a path search problem with a very large branching factor, but where the answers always involve a relatively short sequence of actions (whose exact length is unknown). All actions have the same cost. What search algorithm would you use to find the optimal answer? Indicate under what conditions, if any, a visited or expanded list would be a good idea
//// ANSWER: Progressive deepening (PD) is best here. Since all costs are equal, both breadth-first search (BFS) and PD will find the shortest path. However, BFS’s space cost is prohibitive in high branching-factor scenarios, and using a visited list with PD would negate its space advantage.
#### 2. You are faced with a path search problem with a very large branching factor, but where the answers always involve a relatively short sequence of actions (whose exact length is unknown). These actions, however, have widely varying costs. What search algorithm would you use to find the optimal answer? Indicate under what conditions, if any, a visited or expanded list would be a good idea
//// ANSWER: Use Uniform Cost Search since the costs vary. An expanded list is useful here to prevent re-exploration of states, especially if the search space contains loops—even though the relatively short solution path might lessen the impact of extra memory usage.

## 2 Constraints (16 points)
Consider assigning colors to a checkerboard so that squares that are adjacent vertically or horizontally do not share the same color. We know this can be done with just two colors (red, R, and black, B). We limit our discussion to five squares on a 3×3 board, numbered as follows:
```
 1 | 2 | 3
-----------
 4 | 5 |
-----------
   |   |
```
The CSP formulation treats squares as variables and colors as values (each variable initially has the domain {R, B}).
#### 1. If we run full constraint propagation on the initial state, what are the resulting domains of the variables
//// ANSWER: None of the variable domains change. The domains remain:
1 = {R, B}, 2 = {R, B}, 3 = {R, B}, 4 = {R, B}, 5 = {R, B}.
#### 2. Say, instead, the initial domain of variable 5 is restricted to {B} (other domains remain {R, B}). If we now run full constraint propagation, what are the resulting domains of the variables
//// ANSWER: The domains become:
1 = {B}, 2 = {R}, 3 = {B}, 4 = {R}, 5 = {B}.
#### 3. If in the initial state (all variables have domains {R, B}) we assign variable 1 to R and perform forward checking, what are the resulting domains of the other variables
//// ANSWER: Forward checking affects only the immediate neighbors of variable 1 (variables 2 and 4). The resulting domains are:
1 = {R}, 2 = {B}, 3 = {R, B}, 4 = {B}, 5 = {R, B}.
#### 4. Assume that during backtracking we first attempt assigning variables to R then to B. We examine variables in numerical order starting with 1, and let the domain of variable 5 be {B} (others {R, B}). In the given search tree (not shown here), indicate how pure backtracking (BT) would proceed by marking attempted assignments and crossing out nodes where constraints fail
//// ANSWER: [No explicit answer is provided; this question requires marking the search tree based on backtracking and constraint propagation rules.]
#### 5. If we use backtracking with forward checking (BT-FC) in this same situation, give a list of all assignments attempted, in sequence. (Use the notation “variable = color”, e.g., 1 = R.
//// ANSWER: The sequence of assignments with domain updates is as follows:
```
Assignment:    None  →  1 = R  →  2 = B  →  (backtrack)  →  1 = B  →  2 = R  →  3 = B  →  4 = R  →  5 = B

Domain of 1:   {R, B} → R      → R      → restored to {R, B} when backtracking → B  → B  → B  → B  → B
Domain of 2:   {R, B} → {B}    → B      → restored to {R, B} → {R} → R  → R  → R  → R
Domain of 3:   {R, B} → {R, B} → {R}  → {R, B} → {B} → B  → B  → B  → B
Domain of 4:   {R, B} → {B}    → {B}  → {R}    → {R} → {R} → R  → R  → R
Domain of 5:   {B}    → {B}    → {} (failure) → {B} → {B} → {B} → {B} → B
```
(Note: When an empty domain is reached, the algorithm backtracks and restores the previous domains.)
#### 6. If we use BT-FC with dynamic variable ordering (using the most-constrained-variable strategy), list all variable assignments attempted in sequence. In case of a tie, use the lowest-numbered variable first
//// ANSWER: With dynamic ordering, the sequence becomes:
```
Assignment:    None  →  5 = B  →  2 = R  →  1 = B  →  3 = B  →  4 = R

Domain of 1:   {R, B} → {R, B} → {B}   → B   → B   → B
Domain of 2:   {R, B} → {R}   → R   → R   → R   → R
Domain of 3:   {R, B} → {R, B} → {B}   → {B} → B   → B
Domain of 4:   {R, B} → {R}   → {R}   → {R} → {R} → R
Domain of 5:   {B}    → B      → B   → B   → B   → B
```
## 3 Constraint Satisfaction (24 points)

You are trying to schedule telescope observations. There are m scientists each with n observation requests. Each observation is defined by a target, a telescope instrument, and a time slot. Constraints are:

- **C1:** Exactly two observations from each scientist’s list are scheduled.
- **C2:** At most one observation per instrument per time slot.
- **C3:** Observations in the same time slot must share the same target.

Three formulations are considered:

### Formulation A: Variables are the 3k instrument/time slots.
1. What is the value domain for the variables
//// ANSWER: For each instrument/time slot, the domain is the set of observations requesting that instrument/time slot plus an 'empty' value.
2. What is the size of the domain for the variables (in terms of k, m, and n)
//// ANSWER: The domain size is at most m·n + 1 per variable.
3. Which constraints are necessarily satisfied because of the formulation
//// ANSWER: Constraint C2 is automatically satisfied because each instrument/time slot can have at most one observation.
4. Can the constraints be specified as binary constraints in this formulation? Explain
//// ANSWER: C1 cannot be expressed as a binary constraint because it requires checking all assignments simultaneously to ensure exactly two observations per scientist. C3 can be modeled as a binary constraint by enforcing that for variables in the same time slot, if two observations are assigned, their targets must match.

### Formulation B: Variables are the m scientists.
1. What is the value domain for the variables
//// ANSWER: For each scientist, the domain is all possible pairs of observations from their list.
2. What is the size of the domain for the variables
//// ANSWER: Approximately (n²)/2 per scientist.
3. Which constraints are necessarily satisfied because of the formulation
//// ANSWER: Constraint C1 is satisfied by construction, as each scientist is assigned exactly two observations.
4. Can the constraints be specified as binary constraints in this formulation? Explain
//// ANSWER: Yes. C2 can be enforced by placing binary constraints between scientists to prevent instrument/time conflicts, and C3 can be enforced by requiring that if observations from different scientists occur at the same time slot, their targets do not conflict.

### Formulation C: Variables are the m·n scientists' requests.
1. What is the value domain for the variables
//// ANSWER: The domain for each request is {Granted, Rejected}.
2. What is the size of the domain for the variables
//// ANSWER: The domain size is 2.
3. Which constraints are necessarily satisfied because of the formulation
//// ANSWER: None are automatically satisfied.
4. Can the constraints be specified as binary constraints in this formulation? Explain
//// ANSWER: C1 cannot be specified as a binary constraint because it requires global counting of Granted assignments per scientist. However, C2 and C3 can be expressed as binary constraints by enforcing that any two Granted requests do not conflict in instrument/time or target within the same time slot.

## 4 Search Problem Formulation (23 points)

A Mars rover must drive, collect rock samples, and return to its lander. It has batteries (charge up to 10 units), a drive map (with battery and time costs per square), and can pick up a rock (costing 1 unit of battery). The goal is to collect one rock of each of 10 types within three days while minimizing a combination of distance and weight (using a tradeoff parameter α). The rover starts at the lander with a full battery and must return.

Given a list of potential state variables:
- Types of rocks already collected
- Current rover location (square on map)
- Current lander location (square on map)
- Weight of rocks at current location
- Cost to traverse the current location
- Time since last charged
- Time since departure from lander
- Current day
- Current battery charge level
- Total battery capacity
- Distance to lander
- Total weight of currently collected rocks

#### 1. Use a set of these variables to describe the rover's state (exclude extraneous information)
//// ANSWER: A concise state representation includes: types of rocks already collected; time since departure from lander; current rover location; current battery charge level; and total weight of collected rocks.

#### 2. Specify the goal test
//// ANSWER: The goal is reached when the rover has collected one rock of each type, the elapsed time is less than three days, and the rover is back at the lander.

#### 3. Specify the actions (charge, move, pick-up-rock), indicating preconditions and state modifications
//// ANSWER:
- **charge:** No preconditions; increases battery charge by 1 unit and increments time-since-departure by 1 hour.
- **move:** Precondition: sufficient battery to traverse the square; effects: reduces battery by the square’s traversal cost, increases time by the travel duration, and updates the rover’s location.
- **pick-up-rock:** Precondition: at least 1 unit of battery available; effects: reduces battery by 1 unit and adds the rock at the current location to the collection.

#### 4. Specify a cost function for each action
//// ANSWER:
- **charge:** Cost is 0.
- **move:** Cost is proportional to distance (e.g., 10 meters per move).
- **pick-up-rock:** Cost is α times the weight of the rock at the current location.

#### 5. Evaluate the following heuristics (with l = number of rocks already collected):
- **H1:** Sum of distances from the rover to the 10–l closest locations for missing rock types
//// ANSWER: H1 is inadmissible because it may overestimate the true minimal cost.
- **H2:** Length of the shortest tour through the 10–l closest locations for missing rock types
//// ANSWER: H2 is computationally impractical and is also inadmissible.
- **H3:** Distance from the rover back to the lander
//// ANSWER: H3 is admissible but very weak.

## 5 Search Traces (21 points)

For the following search trees (G1 through G7), identify:
1. The algorithm used.
2. The heuristic (if any) applied.
3. Whether the least-cost path was found, and if not, why.

### G1
Search Tree:
A → B
A → D
B → C
B → D
B → G
//// ANSWER:
1. Algorithm: Breadth First Search
2. Heuristic: None
3. It did not find the least-cost path because BFS guarantees the shortest number of links but does not account for link costs.

### G2
Search Tree (with scores):
A (6) → B
A (3) → D
D (4) → C
D → G
//// ANSWER:
1. Algorithm: Best First Search
2. Heuristic: H1
3. It did not find the least-cost path because Best First Search is not optimal—it selects the first path reaching the goal without full cost evaluation.

### G3
Search Tree (with scores):
A (7) → B
A (6) → D
D (8) → C
D (6) → G
//// ANSWER:
1. Algorithm: A* Search
2. Heuristic: H1
3. It did not find the least-cost path because A* guarantees optimality only with an admissible heuristic, and H1 overestimates costs (i.e., is not admissible).

### G4
Search Tree (with scores):
A (3) → B
A (2) → D
D (0) → C
C → G
//// ANSWER:
1. Algorithm: Best First Search
2. Heuristic: H2
3. It found the least-cost path in this instance, even though Best First Search is not generally optimal.

### G5
Search Tree:
A → B
A → D
B → C
B → D
B → G
C → G
//// ANSWER:
1. Algorithm: Depth First Search
2. Heuristic: None
3. It did not find the least-cost path because DFS does not consider path cost, merely the depth-first order.

### G6
Search Tree (with scores):
A (4) → B
B (6) → C
B (7) → D
B (7) → G
A (5) → D
D (4) → C
D (6) → G
C (5) → G
//// ANSWER:
1. Algorithm: A* Search
2. Heuristic: H2
3. It found the least-cost path. Although H2 is admissible, it isn’t consistent; however, A* still reached the optimal solution in this case.

### G7
Search Tree (with scores):
A (1) → B
A (3) → D
B (6) → C
B (5) → D
B (7) → G
D (6) → C
D (8) → G
D (4) → C
D (6) → G
C (5) → G
//// ANSWER:
1. Algorithm: Uniform Cost Search
2. Heuristic: None
3. It found the least-cost path because Uniform Cost Search is guaranteed to return an optimal path when link costs are positive.